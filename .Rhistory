})
} else NULL
delta_limits <- if (!is.null(phase_lines_dt) || !is.null(fract_lines_dt)) {
tryCatch({
all_phase_lines <- rbind(phase_lines_dt, fract_lines_dt, fill = TRUE)
range <- range(all_phase_lines$dy, na.rm = TRUE)
print("Calculated delta_limits")
range
}, error = function(e) {
cat("Error in calculating delta limits:", e$message, "\n")
return(NULL)
})
} else NULL
# Plot generation code blocks follow the same pattern
trajectory_plots <- if ("trajectory_plots" %in% option) {
tryCatch({
result <- iterate_plotting(pseudotime_trajectory_dt, plot_trajectory,
n_cores = n_cores,
save = plot_individual)
print("Calculated trajectory_plots")
result
}, error = function(e) {
cat("Error in generating trajectory plots:", e$message, "\n")
return(NULL)
})
} else NULL
all_trajectory_plots <- if ("all_trajectory_plots" %in% option) {
tryCatch({
result <- iterate_plotting(phase_space_dt, plot_all_trajectories,
n_cores = n_cores,
save = plot_individual)
print("Calculated all_trajectory_plots")
result  # Return result
}, error = function(e) {
cat("Error in generating all trajectory plots:", e$message, "\n")
return(NULL)
})
} else NULL
stream_plots <- if ("stream_plots" %in% option) {
tryCatch({
result <- iterate_plotting(phase_portrait_dt, plot_stream,
bin_width = bin_width, save = plot_individual,
n_cores = n_cores,
res = stream_resolution)
print("Calculated stream_plots")
result  # Return result
}, error = function(e) {
cat("Error in generating stream plots:", e$message, "\n")
return(NULL)
})
} else NULL
phase_portrait_plots <- if ("phase_portrait_plots" %in% option) {
tryCatch({
result <- iterate_plotting(phase_portrait_dt, plot_phase_portrait,
bin_width = bin_width,
n_cores = n_cores,
save = plot_individual)
print("Calculated phase_portrait_plots")
result
}, error = function(e) {
cat("Error in generating phase portrait plots:", e$message, "\n")
})
}
phase_line_plots <- if ("phase_line_plots" %in% option && !is.null(delta_limits)) {
tryCatch({
result <- iterate_plotting(phase_lines_dt, plot_phase_line,
min_y = delta_limits[1], max_y = delta_limits[2],
n_cores = n_cores,
save = plot_individual)
print("Calculated phase_line_plots")
result
}, error = function(e) {
cat("Error in generating phase line plots:", e$message, "\n")
})
}
n_plots <- if ("n_plots" %in% option) {
tryCatch({
result <- iterate_plotting(phase_portrait_dt, plot_n, bin_width = bin_width,
n_cores = n_cores,
save = plot_individual)
print("Calculated n_plots")
result
}, error = function(e) {
cat("Error in generating n plots:", e$message, "\n")
})
}
# Fraction-based options
fract_trajectory_plots <- if ("fract_trajectory_plots" %in% option) {
tryCatch({
result <- iterate_plotting(fract_pseudotime_trajectory_dt, plot_trajectory,
input = "fraction", save = plot_individual,
n_cores = n_cores,
fixed_axes = TRUE, fix_coord = TRUE)
print("Calculated fract_trajectory_plots")
result
}, error = function(e) {
cat("Error in generating fractional trajectory plots:", e$message, "\n")
})
}
fract_all_trajectory_plots <- if ("fract_all_trajectory_plots" %in% option) {
tryCatch({
result <- iterate_plotting(phase_space_dt, plot_all_trajectories,
input = "fraction",
fixed_axes = TRUE, fix_coord = TRUE,
n_cores = n_cores,
save = plot_individual)
print("Calculated fract_all_trajectory_plots")
result
}, error = function(e) {
cat("Error in generating fractional all trajectory plots:", e$message, "\n")
})
}
fract_stream_plots <- if ("fract_stream_plots" %in% option) {
tryCatch({
result <- iterate_plotting(fract_phase_portrait_dt, plot_stream,
fixed_axes = TRUE, fix_coord = TRUE,
save = plot_individual,
n_cores = n_cores,
res = stream_resolution)
print("Calculated fract_stream_plots")
result
}, error = function(e) {
cat("Error in generating fractional stream plots:", e$message, "\n")
})
}
fract_phase_portrait_plots <- if ("fract_phase_portrait_plots" %in% option) {
tryCatch({
result <- iterate_plotting(fract_phase_portrait_dt, plot_phase_portrait,
bin_width = bin_width,
fixed_axes = TRUE, fix_coord = TRUE,
n_cores = n_cores,
save = plot_individual)
print("Calculated fract_phase_portrait_plots")
result
}, error = function(e) {
cat("Error in generating fractional phase portrait plots:", e$message, "\n")
})
}
fract_phase_line_plots <- if ("fract_phase_line_plots" %in% option && !is.null(delta_limits)) {
tryCatch({
result <- iterate_plotting(fract_lines_dt, plot_phase_line,
min_y = delta_limits[1], max_y = delta_limits[2],
fixed_axes = TRUE, fix_coord = TRUE,
n_cores = n_cores,
save = plot_individual)
print("Calculated fract_phase_line_plots")
result
}, error = function(e) {
cat("Error in generating fractional phase line plots:", e$message, "\n")
})
}
fract_n_plots <- if ("fract_n_plots" %in% option) {
tryCatch({
result <- iterate_plotting(fract_phase_portrait_dt, plot_n,
bin_width = bin_width, save = plot_individual,
fixed_axes = TRUE, fix_coord = TRUE,
n_cores = n_cores,
input = "fraction")
print("Calculated fract_n_plots")
result
}, error = function(e) {
cat("Error in generating fractional n plots:", e$message, "\n")
})
}
# Generate variable list to prepare for combinations
variable_list <- df %>%
ungroup() %>%
select(variable) %>%
distinct() %>%
pull(variable)
variable_list <- expand.grid(variable_list, variable_list)
names(variable_list) <- c("x", "y")
variable_list <- variable_list %>% filter(x != y)
# Define save_combined_plot globally to avoid redundant function creation
save_combined_plot <- function(plot_grob, filename, height, width) {
# Use Cairo PDF device for better compatibility with parallel processing
CairoPDF(file = filename, height = height, width = width)
# Draw the combined grob directly onto the device
grid::grid.draw(plot_grob)
# Close the PDF device
dev.off()
}
# Define merge_plots function
merge_plots <- function(i, option) {
# Define plot elements based on option
plot_elements <- switch(option,
"all" = list(
all_trajectory_plots[[i]], trajectory_plots[[i]], n_plots[[i]], phase_portrait_plots[[i]],
stream_plots[[i]], phase_line_plots[[i]],
fract_all_trajectory_plots[[i]], fract_trajectory_plots[[i]],
fract_n_plots[[i]], fract_phase_portrait_plots[[i]], fract_stream_plots[[i]], fract_phase_line_plots[[i]]
),
"standard" = list(
all_trajectory_plots[[i]], trajectory_plots[[i]], n_plots[[i]], phase_portrait_plots[[i]],
stream_plots[[i]], phase_line_plots[[i]]
),
"fraction" = list(
fract_all_trajectory_plots[[i]], fract_trajectory_plots[[i]], fract_n_plots[[i]],
fract_phase_portrait_plots[[i]], fract_stream_plots[[i]], fract_phase_line_plots[[i]]
),
stop("Invalid option")
)
# Create your specific layout matrix
if(option == "all"){
layout_matrix <- rbind(
c(1, 2, 3, 4, 5),
c(6, 6, 6, 6, 6),
c(7, 8, 9, 10, 11),
c(12, 12, 12, 12, 12)
)
} else{
layout_matrix <- rbind(
c(1, 2, 3, 4, 5),
c(6, 6, 6, 6, 6)
)
}
# Create the arranged grob without plotting
combined_grob <- arrangeGrob(
grobs = plot_elements,
layout_matrix = layout_matrix
)
# Save the plot to PDF without front-end rendering
filename <- paste0(variable_list$x[i], " ", variable_list$y[i], "_combined_plot.pdf")
height <- if (option == "all") 9 * 2 else 9
width <- 16  # Adjust as needed
save_combined_plot(combined_grob, filename, height, width)
# Clean up to free memory
rm(plot_elements, combined_grob)
gc()
return(NULL)
}
# n_cores = max(c(1, round(n_cores/2)))
n_cores = 1
# Apply merge function if combined plotting is requested
if (plot_combined & n_cores > 1 & original_option %in% c("all", "standard", "fraction")) {
tryCatch({
mclapply(1:NROW(variable_list), function(i) merge_plots(i, original_option), mc.cores = n_cores)
}, error = function(e) {
cat("Error in merging and saving combined plots:", e$message, "\n")
})
}
if(plot_combined & n_cores == 1 & original_option %in% c("all", "standard", "fraction")){
tryCatch({
lapply(1:NROW(variable_list), function(i) merge_plots(i, original_option))
}, error = function(e) {
cat("Error in merging and saving combined plots:", e$message, "\n")
})
}
}
table_path <- "~/Documents/phase_portrait_analysis/proteomes.csv"
annotations_path <- "~/Documents/phase_portrait_analysis/annotations.csv"
save_path <- "~/Documents/phase_portrait_analysis"
bin_width = 0.25 # For x/y of phase portrait
min_bin_n = 1
setwd(dirname(save_path))
dir.create(save_path)
setwd(save_path)
save_path <- file.path(save_path, paste("bin_width", bin_width))
dir.create(save_path)
setwd(save_path)
library(data.table)
library(dplyr)
devtools::load_all("/Users/rdeliza/phase.portrait")
original_table <- fread(table_path)
annotations <- fread(annotations_path)
table <-
merge(original_table, annotations, by.x = "Genes", by.y = "Genes") %>%
filter(
Genes %in% unique(original_table$Genes)[1:3]
# Genes %in% c("CTNNB1", "CDH1")
) %>%
filter(
# Remove unknowns
Genes != ""
) %>%
# Remove unecessary variables
select(-c(Z_Score, Stage)) %>%
# Standardize data
rename(
value = Median_Subtracted, # Select data source
pseudotime = Stage_Numeric, # Time equivalent
sample = Patient,
condition = Compartment,
variable = First.Protein.Description
) %>%
group_by(variable) %>%
filter(NROW(unique(condition)) == 2) %>%
select(
value, pseudotime, sample, condition, variable
) %>%
as.data.table()
# Clean the table
devtools::load_all("/Users/rdeliza/phase.portrait")
example_dataset <- rbind(lotka_volterra(), lotka_volterra(alpha = 0.75))
d_table <- scale_and_diff(example_dataset)
run_analysis(d_table, option = "stream_plots", plot_individual = T, bin_width = 0.1)
table_path <- "~/Documents/phase_portrait_analysis/proteomes.csv"
annotations_path <- "~/Documents/phase_portrait_analysis/annotations.csv"
save_path <- "~/Documents/phase_portrait_analysis"
bin_width = 0.25 # For x/y of phase portrait
min_bin_n = 1
setwd(dirname(save_path))
dir.create(save_path)
setwd(save_path)
save_path <- file.path(save_path, paste("bin_width", bin_width))
dir.create(save_path)
setwd(save_path)
library(data.table)
library(dplyr)
devtools::load_all("/Users/rdeliza/phase.portrait")
original_table <- fread(table_path)
annotations <- fread(annotations_path)
table <-
merge(original_table, annotations, by.x = "Genes", by.y = "Genes") %>%
filter(
Genes %in% unique(original_table$Genes)[1:3]
# Genes %in% c("CTNNB1", "CDH1")
) %>%
filter(
# Remove unknowns
Genes != ""
) %>%
# Remove unecessary variables
select(-c(Z_Score, Stage)) %>%
# Standardize data
rename(
value = Median_Subtracted, # Select data source
pseudotime = Stage_Numeric, # Time equivalent
sample = Patient,
condition = Compartment,
variable = First.Protein.Description
) %>%
group_by(variable) %>%
filter(NROW(unique(condition)) == 2) %>%
select(
value, pseudotime, sample, condition, variable
) %>%
as.data.table()
# Clean the table
devtools::load_all("/Users/rdeliza/phase.portrait")
example_dataset <- rbind(lotka_volterra(), lotka_volterra(alpha = 0.75))
d_table <- scale_and_diff(example_dataset)
run_analysis(d_table, option = "stream_plots", plot_individual = T, bin_width = 0.1)
table_path <- "~/Documents/phase_portrait_analysis/proteomes.csv"
annotations_path <- "~/Documents/phase_portrait_analysis/annotations.csv"
save_path <- "~/Documents/phase_portrait_analysis"
bin_width = 0.25 # For x/y of phase portrait
min_bin_n = 1
setwd(dirname(save_path))
dir.create(save_path)
setwd(save_path)
save_path <- file.path(save_path, paste("bin_width", bin_width))
dir.create(save_path)
setwd(save_path)
library(data.table)
library(dplyr)
devtools::load_all("/Users/rdeliza/phase.portrait")
original_table <- fread(table_path)
annotations <- fread(annotations_path)
table <-
merge(original_table, annotations, by.x = "Genes", by.y = "Genes") %>%
filter(
Genes %in% unique(original_table$Genes)[1:3]
# Genes %in% c("CTNNB1", "CDH1")
) %>%
filter(
# Remove unknowns
Genes != ""
) %>%
# Remove unecessary variables
select(-c(Z_Score, Stage)) %>%
# Standardize data
rename(
value = Median_Subtracted, # Select data source
pseudotime = Stage_Numeric, # Time equivalent
sample = Patient,
condition = Compartment,
variable = First.Protein.Description
) %>%
group_by(variable) %>%
filter(NROW(unique(condition)) == 2) %>%
select(
value, pseudotime, sample, condition, variable
) %>%
as.data.table()
# Clean the table
devtools::load_all("/Users/rdeliza/phase.portrait")
example_dataset <- rbind(lotka_volterra(), lotka_volterra(alpha = 0.75))
d_table <- scale_and_diff(example_dataset)
run_analysis(d_table, option = "stream_plots", plot_individual = T, bin_width = 0.1)
table_path <- "~/Documents/phase_portrait_analysis/proteomes.csv"
annotations_path <- "~/Documents/phase_portrait_analysis/annotations.csv"
save_path <- "~/Documents/phase_portrait_analysis"
bin_width = 0.25 # For x/y of phase portrait
min_bin_n = 1
setwd(dirname(save_path))
dir.create(save_path)
setwd(save_path)
save_path <- file.path(save_path, paste("bin_width", bin_width))
dir.create(save_path)
setwd(save_path)
library(data.table)
library(dplyr)
devtools::load_all("/Users/rdeliza/phase.portrait")
original_table <- fread(table_path)
annotations <- fread(annotations_path)
table <-
merge(original_table, annotations, by.x = "Genes", by.y = "Genes") %>%
filter(
Genes %in% unique(original_table$Genes)[1:3]
# Genes %in% c("CTNNB1", "CDH1")
) %>%
filter(
# Remove unknowns
Genes != ""
) %>%
# Remove unecessary variables
select(-c(Z_Score, Stage)) %>%
# Standardize data
rename(
value = Median_Subtracted, # Select data source
pseudotime = Stage_Numeric, # Time equivalent
sample = Patient,
condition = Compartment,
variable = First.Protein.Description
) %>%
group_by(variable) %>%
filter(NROW(unique(condition)) == 2) %>%
select(
value, pseudotime, sample, condition, variable
) %>%
as.data.table()
# Clean the table
devtools::load_all("/Users/rdeliza/phase.portrait")
example_dataset <- rbind(lotka_volterra(), lotka_volterra(alpha = 0.75))
d_table <- scale_and_diff(example_dataset)
run_analysis(d_table, option = "stream_plots", plot_individual = T, bin_width = 0.1)
table_path <- "~/Documents/phase_portrait_analysis/proteomes.csv"
annotations_path <- "~/Documents/phase_portrait_analysis/annotations.csv"
save_path <- "~/Documents/phase_portrait_analysis"
bin_width = 0.25 # For x/y of phase portrait
min_bin_n = 1
setwd(dirname(save_path))
dir.create(save_path)
setwd(save_path)
save_path <- file.path(save_path, paste("bin_width", bin_width))
dir.create(save_path)
setwd(save_path)
library(data.table)
library(dplyr)
devtools::load_all("/Users/rdeliza/phase.portrait")
original_table <- fread(table_path)
annotations <- fread(annotations_path)
table <-
merge(original_table, annotations, by.x = "Genes", by.y = "Genes") %>%
filter(
Genes %in% unique(original_table$Genes)[1:3]
# Genes %in% c("CTNNB1", "CDH1")
) %>%
filter(
# Remove unknowns
Genes != ""
) %>%
# Remove unecessary variables
select(-c(Z_Score, Stage)) %>%
# Standardize data
rename(
value = Median_Subtracted, # Select data source
pseudotime = Stage_Numeric, # Time equivalent
sample = Patient,
condition = Compartment,
variable = First.Protein.Description
) %>%
group_by(variable) %>%
filter(NROW(unique(condition)) == 2) %>%
select(
value, pseudotime, sample, condition, variable
) %>%
as.data.table()
# Clean the table
devtools::load_all("/Users/rdeliza/phase.portrait")
example_dataset <- rbind(lotka_volterra(), lotka_volterra(alpha = 0.75))
d_table <- scale_and_diff(example_dataset)
run_analysis(d_table, option = "stream_plots", plot_individual = T, bin_width = 0.1)
run_analysis(d_table, option = "stream_plots", plot_individual = T, bin_width = 0.25)
run_analysis
run_analysis
??run_analysis
run_analysis
# Load all package functions
library(usethis)
library(devtools)
usethis::create_package("/Users/rdeliza/phase.portrait")
usethis::proj_get()
setwd("/Users/rdeliza/phase.portrait")
usethis::proj_get()
devtools::document()
devtools::build_manual()
example_dataset <-
rbind(lotka_volterra(), lotka_volterra(alpha = 2/3, beta = 4/3, 1, 1))
fwrite(example_dataset, "example.csv")
example_dataset <-
rbind(lotka_volterra(), lotka_volterra(alpha = alpha = 0.75))
example_dataset <-
rbind(lotka_volterra(), lotka_volterra(alpha = alpha = 0.75))
example_dataset <-
rbind(lotka_volterra(), lotka_volterra(alpha = alpha = 0.75))
example_dataset <-
rbind(lotka_volterra(), lotka_volterra(alpha = alpha = 0.75))
example_dataset <-
rbind(lotka_volterra(), lotka_volterra(alpha = 0.75))
fwrite(example_dataset, "example.csv")
