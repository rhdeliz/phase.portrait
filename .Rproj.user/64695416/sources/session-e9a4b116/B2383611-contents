#' @name iterate_plotting
#' @title Generate Multiple Plots with Fixed or Dynamic Axes
#' This function iterates over a dataset and generates multiple plots using a specified plotting function. It supports fixed or dynamic axis limits based on the overall dataset or additional arguments provided. Each subset of data is passed to the plotting function along with optional parameters.
#' @param df A data frame containing the dataset with `x`, `y`, `x_label`, and `y_label` columns.
#' @param fx A function to generate individual plots. It should accept arguments `df_split`, `input`, `save`,
#'   and optionally `min_x`, `max_x`, `min_y`, `max_y`.
#' @param input A character string specifying the input type, either "standard" or "fraction". Default is "standard".
#' @param fixed_axes Logical. If TRUE, uses global axis limits for all plots. If FALSE, each plot can have dynamic axis limits. Default is TRUE.
#' @param save Logical. If TRUE, saves each plot generated by the `fx` function. Default is FALSE.
#' @param ... Additional arguments passed to `fx`, allowing custom axis limits (`min_x`, `max_x`, `min_y`, `max_y`).
#'
#' @return A list of plots generated by the `fx` function, each created based on a subset of `df`.
#' @examples
#' # Example usage:
#' # plots <- iterate_plotting(df, fx = plot_phase_portrait, input = "standard", fixed_axes = TRUE)
#'
iterate_plotting <- function(df, fx, input = "standard", fixed_axes = TRUE, save = FALSE, ...) {
  # Override 'input' with df$input[1] if 'input' column exists in df
  if ("input" %in% names(df)) {
    input <- df$input[1]
  }

  # Calculate global axis limits based on entire dataset
  limits_df <- df %>%
    ungroup() %>%
    summarise(
      min_x = min(x, na.rm = TRUE),
      max_x = max(x, na.rm = TRUE),
      min_y = min(y, na.rm = TRUE),
      max_y = max(y, na.rm = TRUE)
    )

  # Extract additional arguments from `...`
  extra_args <- list(...)

  # Split the data by x_label and y_label
  split_pp <- df %>% group_split(x_label, y_label)

  # Call the plotting function, passing all additional arguments with ...
  plots <- lapply(split_pp, function(df_split) {
    args <- list(
      df_split,
      input = input,
      save = save
    )

    # Conditionally add limits based on fixed_axes and availability in extra_args
    if (fixed_axes || !is.null(extra_args$min_x)) args$min_x <- ifelse(!is.null(extra_args$min_x), extra_args$min_x, limits_df$min_x)
    if (fixed_axes || !is.null(extra_args$max_x)) args$max_x <- ifelse(!is.null(extra_args$max_x), extra_args$max_x, limits_df$max_x)
    if (fixed_axes || !is.null(extra_args$min_y)) args$min_y <- ifelse(!is.null(extra_args$min_y), extra_args$min_y, limits_df$min_y)
    if (fixed_axes || !is.null(extra_args$max_y)) args$max_y <- ifelse(!is.null(extra_args$max_y), extra_args$max_y, limits_df$max_y)

    do.call(fx, args)
  })

  return(plots)
}
