# Required Libraries
library(ggplot2)
library(dplyr)
library(viridis)
library(metR)

#' @name plot_stream
#' @title Plot Phase Streamline
#' This function creates a phase streamline plot, visualizing the dynamics of two variables (`x` and `y`) across conditions. It supports both standard and fraction-based input types, with options for binning, custom axis limits, fixed aspect ratio, and saving the plot.
#' @param df A data frame containing columns `x`, `y`, `dx`, `dy`, `condition`, `x_variable`, and `y_variable`.
#' @param input A character string indicating the type of input, either `"standard"` or `"fraction"`. Default is `"standard"`.
#' @param n_bins Integer specifying the number of bins for discretizing `x` and `y`. Default is 4.
#' @param min_x, max_x Optional numeric values to set limits for the x-axis.
#' @param min_y, max_y Optional numeric values to set limits for the y-axis.
#' @param save Logical, if TRUE, saves the plot as a PDF file. Default is FALSE.
#' @return A ggplot object showing the phase streamline.
#' @examples
#' plot_stream(df, input = "standard", n_bins = 4, min_x = 0, max_x = 1, min_y = 0, max_y = 1, save = TRUE)
#' @export

plot_stream <- function(df, input = "standard", n_bins = 4, min_x = NULL, max_x = NULL, min_y = NULL, max_y = NULL, save = FALSE){

  # Override 'input' with df$input[1] if 'input' column exists in df
  if("input" %in% names(df)) {
    input <- df$input[1]
  }

  # Validate input to ensure it contains valid values
  if (!input %in% c("standard", "fraction")) {
    stop("Invalid input: Choose 'standard' or 'fraction'")
  }

  # Data preprocessing: Calculate color and complete bins
  df <- df %>%
    drop_na() %>%
    mutate(color = sqrt(dx^2 + dy^2)) %>%  # Calculate magnitude for coloring
    group_by(input, condition) %>%
    mutate(
      x = x * n_bins,                    # Scale x for binning
      y = y * n_bins                     # Scale y for binning
    ) %>%
    complete(
      x = full_seq(c(min_x * n_bins, max_x * n_bins), period = 1),
      y = full_seq(c(min_y * n_bins, max_y * n_bins), period = 1)
    ) %>%
    mutate(
      x = x / n_bins,                    # Scale x back
      y = y / n_bins                     # Scale y back
    ) %>%
    mutate(
      x_variable = df$x_variable[1],     # Assign x and y labels based on data frame
      y_variable = df$y_variable[1]
    ) %>%
    ungroup() %>%
    fill(x_label, y_label, dx_label, dy_label, .direction = "updown")  # Fill labels

  # Replace NA values with 0 for better plotting
  df[is.na(df)] <- 0

  # Initialize ggplot with streamline layer to show phase dynamics
  plot <- ggplot() +
    geom_streamline(
      data = df,
      aes(
        x, y,
        dx = dx, dy = dy
      ),
      n = 10,              # Number of streamlines
      L = 1,               # Length of streamlines
      res = 10, linewidth = 0.1
    ) +
    scale_color_viridis() +
    facet_grid(~condition) +
    labs(
      title = paste("Phase portrait stream,", df$input[1]),  # Title with input label
      x = paste0(df$x_label[1], "\n\n\n\n"),                  # X-axis label
      y = df$y_label[1],                                      # Y-axis label
      color = "Magnitude"                                     # Legend title for color
    ) +
    theme_classic(base_size = 12) +
    theme(
      legend.position = "bottom",                             # Position legend at bottom
      legend.key.width = unit(1, "cm"),                       # Width of legend key
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)  # Rotate x-axis text
    )

  # Add optional x and y axis limits
  if(!is.null(min_x) && !is.null(max_x)) {
    plot <- plot + scale_x_continuous(limits = c(min_x, max_x))
  }
  if(!is.null(min_y) && !is.null(max_y)) {
    plot <- plot + scale_y_continuous(limits = c(min_y, max_y))
  }

  # Apply fixed aspect ratio for non-fractional input to maintain shape consistency
  if (input != "fraction") {
    plot <- plot + coord_fixed()
  }

  # Optionally save plot as a PDF with dynamic filename
  if(save) {
    ggsave(
      filename = paste0("stream_", input, "_", unique(df$x_variable), "_", unique(df$y_variable), ".pdf"),
      plot = plot,
      height = 4, width = 6
    )
  }

  return(plot)
}
